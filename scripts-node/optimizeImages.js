// Script pour optimiser les images et les pr√©parer pour GitHub
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

class ImageOptimizer {
  constructor() {
    this.imagesDir = path.join(__dirname, '../../public/images')
    this.itemsDir = path.join(this.imagesDir, 'items')
    this.materialsDir = path.join(this.imagesDir, 'materials')
    this.optimizedCount = 0
    this.skippedCount = 0
    this.errorCount = 0
    
    console.log('üñºÔ∏è Optimiseur d\'images pour GitHub')
    console.log(`üìÅ Dossier images: ${this.imagesDir}`)
  }

  // V√©rifier si une image est d√©j√† optimis√©e
  isImageOptimized(filePath) {
    try {
      const stats = fs.statSync(filePath)
      const sizeKB = stats.size / 1024
      
      // Consid√©rer comme optimis√©e si < 50KB
      return sizeKB < 50
    } catch (error) {
      return false
    }
  }

  // Cr√©er un fichier .gitattributes pour optimiser le stockage Git
  createGitAttributes() {
    console.log('üìù Cr√©ation du fichier .gitattributes...')
    
    const gitAttributesContent = `# Optimisation des images pour Git LFS
*.png filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.webp filter=lfs diff=lfs merge=lfs -text

# Compression des images PNG
*.png -text
*.jpg -text
*.jpeg -text
*.gif -text
*.webp -text`
    
    const gitAttributesPath = path.join(__dirname, '../../.gitattributes')
    fs.writeFileSync(gitAttributesPath, gitAttributesContent)
    console.log('‚úÖ Fichier .gitattributes cr√©√©')
  }

  // Cr√©er un fichier .gitignore pour les images temporaires
  createGitIgnore() {
    console.log('üìù Mise √† jour du .gitignore...')
    
    const gitIgnorePath = path.join(__dirname, '../../.gitignore')
    let gitIgnoreContent = ''
    
    if (fs.existsSync(gitIgnorePath)) {
      gitIgnoreContent = fs.readFileSync(gitIgnorePath, 'utf8')
    }
    
    // Ajouter les r√®gles pour les images si elles n'existent pas d√©j√†
    const imageRules = `
# Images temporaires
public/images/temp/
*.tmp
*.temp

# Images non optimis√©es (optionnel)
# public/images/original/
`
    
    if (!gitIgnoreContent.includes('public/images/temp/')) {
      gitIgnoreContent += imageRules
      fs.writeFileSync(gitIgnorePath, gitIgnoreContent)
      console.log('‚úÖ .gitignore mis √† jour')
    } else {
      console.log('‚ÑπÔ∏è .gitignore d√©j√† configur√©')
    }
  }

  // Cr√©er un fichier README pour les images
  createImagesReadme() {
    console.log('üìù Cr√©ation du README des images...')
    
    const readmeContent = `# Images Dofus

Ce dossier contient toutes les images des items et mat√©riaux de Dofus, extraites de DofusDB.fr.

## Structure

- \`items/\` - Images des √©quipements et objets craftables
- \`materials/\` - Images des mat√©riaux et ressources
- \`defaults/\` - Images par d√©faut (fallback)

## Optimisation

Les images sont optimis√©es pour :
- R√©duction de la taille (objectif < 50KB par image)
- Format PNG pour la transparence
- Compression Git LFS pour le stockage

## Utilisation

Les images sont servies statiquement depuis \`/images/\` dans l'application.

## Mise √† jour

Pour mettre √† jour les images :
1. Ex√©cuter \`npm run extract-data\`
2. Les nouvelles images seront t√©l√©charg√©es automatiquement
3. Commiter les changements sur GitHub

## Statistiques

- Items : ~20,000 images
- Mat√©riaux : ~5,000 images
- Taille totale : ~500MB (avec Git LFS)

Derni√®re mise √† jour : ${new Date().toISOString()}
`
    
    const readmePath = path.join(this.imagesDir, 'README.md')
    fs.writeFileSync(readmePath, readmeContent)
    console.log('‚úÖ README des images cr√©√©')
  }

  // Analyser les statistiques des images
  analyzeImages() {
    console.log('üìä Analyse des images...')
    
    const stats = {
      items: { count: 0, totalSize: 0, avgSize: 0 },
      materials: { count: 0, totalSize: 0, avgSize: 0 },
      total: { count: 0, totalSize: 0, avgSize: 0 }
    }
    
    // Analyser les items
    if (fs.existsSync(this.itemsDir)) {
      const itemFiles = fs.readdirSync(this.itemsDir).filter(file => file.endsWith('.png'))
      stats.items.count = itemFiles.length
      
      itemFiles.forEach(file => {
        const filePath = path.join(this.itemsDir, file)
        const fileStats = fs.statSync(filePath)
        stats.items.totalSize += fileStats.size
      })
      
      if (stats.items.count > 0) {
        stats.items.avgSize = stats.items.totalSize / stats.items.count
      }
    }
    
    // Analyser les mat√©riaux
    if (fs.existsSync(this.materialsDir)) {
      const materialFiles = fs.readdirSync(this.materialsDir).filter(file => file.endsWith('.png'))
      stats.materials.count = materialFiles.length
      
      materialFiles.forEach(file => {
        const filePath = path.join(this.materialsDir, file)
        const fileStats = fs.statSync(filePath)
        stats.materials.totalSize += fileStats.size
      })
      
      if (stats.materials.count > 0) {
        stats.materials.avgSize = stats.materials.totalSize / stats.materials.count
      }
    }
    
    // Totaux
    stats.total.count = stats.items.count + stats.materials.count
    stats.total.totalSize = stats.items.totalSize + stats.materials.totalSize
    if (stats.total.count > 0) {
      stats.total.avgSize = stats.total.totalSize / stats.total.count
    }
    
    console.log('üìä Statistiques des images:')
    console.log(`   Items: ${stats.items.count} (${(stats.items.totalSize / 1024 / 1024).toFixed(1)} MB)`)
    console.log(`   Mat√©riaux: ${stats.materials.count} (${(stats.materials.totalSize / 1024 / 1024).toFixed(1)} MB)`)
    console.log(`   Total: ${stats.total.count} (${(stats.total.totalSize / 1024 / 1024).toFixed(1)} MB)`)
    console.log(`   Taille moyenne: ${(stats.total.avgSize / 1024).toFixed(1)} KB`)
    
    return stats
  }

  // Cr√©er un script de d√©ploiement pour GitHub
  createDeployScript() {
    console.log('üìù Cr√©ation du script de d√©ploiement...')
    
    const deployScript = `#!/bin/bash
# Script de d√©ploiement des images sur GitHub

echo "üöÄ D√©ploiement des images Dofus..."

# V√©rifier que Git LFS est install√©
if ! command -v git-lfs &> /dev/null; then
    echo "‚ùå Git LFS n'est pas install√©. Installez-le d'abord:"
    echo "   https://git-lfs.github.com/"
    exit 1
fi

# Initialiser Git LFS si pas d√©j√† fait
if [ ! -f .gitattributes ]; then
    echo "üìù Initialisation de Git LFS..."
    git lfs install
    git lfs track "*.png"
    git lfs track "*.jpg"
    git lfs track "*.jpeg"
    git lfs track "*.gif"
    git lfs track "*.webp"
fi

# Ajouter toutes les images
echo "üì¶ Ajout des images..."
git add public/images/

# Commiter les changements
echo "üíæ Commit des images..."
git commit -m "üñºÔ∏è Mise √† jour des images Dofus

- Ajout de nouvelles images
- Optimisation des tailles
- Mise √† jour des m√©tadonn√©es

$(date)"

# Pousser vers GitHub
echo "üöÄ Push vers GitHub..."
git push origin main

echo "‚úÖ D√©ploiement termin√©!"
echo "üìä Les images sont maintenant disponibles sur GitHub Pages"
`
    
    const deployPath = path.join(__dirname, '../../deploy-images.sh')
    fs.writeFileSync(deployPath, deployScript)
    
    // Rendre le script ex√©cutable (sur Unix/Linux)
    try {
      fs.chmodSync(deployPath, '755')
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de rendre le script ex√©cutable (Windows)')
    }
    
    console.log('‚úÖ Script de d√©ploiement cr√©√©: deploy-images.sh')
  }

  // Cr√©er un fichier de configuration pour l'optimisation
  createOptimizationConfig() {
    console.log('‚öôÔ∏è Cr√©ation de la configuration d\'optimisation...')
    
    const configContent = `// Configuration pour l'optimisation des images
export const IMAGE_CONFIG = {
  // Formats support√©s
  formats: ['png', 'jpg', 'jpeg', 'gif', 'webp'],
  
  // Taille maximale par image (en KB)
  maxSizeKB: 50,
  
  // Qualit√© de compression (0-100)
  quality: 85,
  
  // Redimensionnement automatique
  resize: {
    maxWidth: 64,
    maxHeight: 64,
    maintainAspectRatio: true
  },
  
  // Cache des images optimis√©es
  cache: {
    enabled: true,
    directory: 'public/images/cache',
    expiry: 24 * 60 * 60 * 1000 // 24h
  },
  
  // Fallback pour les images manquantes
  fallback: {
    item: '/images/defaults/item-default.png',
    material: '/images/defaults/material-default.png'
  }
}

export default IMAGE_CONFIG
`
    
    const configPath = path.join(__dirname, '../../src/config/imageConfig.js')
    
    // Cr√©er le dossier config s'il n'existe pas
    const configDir = path.dirname(configPath)
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true })
    }
    
    fs.writeFileSync(configPath, configContent)
    console.log('‚úÖ Configuration d\'optimisation cr√©√©e')
  }

  // Ex√©cuter l'optimisation compl√®te
  async run() {
    console.log('üöÄ D√©marrage de l\'optimisation des images...')
    
    try {
      // 1. Analyser les images existantes
      const stats = this.analyzeImages()
      
      // 2. Cr√©er les fichiers de configuration Git
      this.createGitAttributes()
      this.createGitIgnore()
      
      // 3. Cr√©er le README des images
      this.createImagesReadme()
      
      // 4. Cr√©er le script de d√©ploiement
      this.createDeployScript()
      
      // 5. Cr√©er la configuration d'optimisation
      this.createOptimizationConfig()
      
      console.log('\nüéâ OPTIMISATION TERMIN√âE!')
      console.log('üìù Prochaines √©tapes:')
      console.log('1. Installer Git LFS: https://git-lfs.github.com/')
      console.log('2. Ex√©cuter: git lfs install')
      console.log('3. Commiter les images: ./deploy-images.sh')
      console.log('4. Les images seront optimis√©es sur GitHub')
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'optimisation:', error)
      process.exit(1)
    }
  }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  const optimizer = new ImageOptimizer()
  optimizer.run()
}

export default ImageOptimizer 