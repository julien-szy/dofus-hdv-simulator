// Script de d√©ploiement optimis√© pour Netlify
// G√®re les images avec Git LFS et optimise le build

const { execSync } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

class NetlifyDeployer {
  constructor() {
    this.projectRoot = path.join(__dirname, '..');
    this.distDir = path.join(this.projectRoot, 'dist');
  }

  async checkGitStatus() {
    console.log('üîç V√©rification du statut Git...');
    
    try {
      const status = execSync('git status --porcelain', { encoding: 'utf8' });
      if (status.trim()) {
        console.log('‚ö†Ô∏è Il y a des changements non commit√©s :');
        console.log(status);
        return false;
      }
      console.log('‚úÖ Aucun changement non commit√©');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur v√©rification Git:', error.message);
      return false;
    }
  }

  async checkGitLFS() {
    console.log('üîç V√©rification de Git LFS...');
    
    try {
      const lfsStatus = execSync('git lfs status', { encoding: 'utf8' });
      console.log('‚úÖ Git LFS configur√©');
      return true;
    } catch (error) {
      console.error('‚ùå Git LFS non configur√©:', error.message);
      return false;
    }
  }

  async buildProject() {
    console.log('üî® Construction du projet...');
    
    try {
      // Nettoyer le dossier dist
      await fs.rm(this.distDir, { recursive: true, force: true });
      
      // Installer les d√©pendances si n√©cessaire
      console.log('üì¶ Installation des d√©pendances...');
      execSync('npm install', { stdio: 'inherit' });
      
      // Construire le projet
      console.log('üèóÔ∏è Build en cours...');
      execSync('npm run build', { stdio: 'inherit' });
      
      console.log('‚úÖ Build termin√© avec succ√®s');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors du build:', error.message);
      return false;
    }
  }

  async optimizeBuild() {
    console.log('‚ö° Optimisation du build...');
    
    try {
      // V√©rifier la taille du build
      const buildSize = await this.getBuildSize();
      console.log(`üìä Taille du build: ${buildSize}`);
      
      // Optimiser les images si n√©cessaire
      await this.optimizeImages();
      
      console.log('‚úÖ Optimisation termin√©e');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'optimisation:', error.message);
      return false;
    }
  }

  async getBuildSize() {
    try {
      const stats = await fs.stat(this.distDir);
      const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
      return `${sizeInMB} MB`;
    } catch (error) {
      return 'Taille inconnue';
    }
  }

  async optimizeImages() {
    console.log('üñºÔ∏è Optimisation des images...');
    
    try {
      // Lancer l'optimisation des images
      execSync('npm run optimize-images', { stdio: 'inherit' });
      console.log('‚úÖ Images optimis√©es');
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible d\'optimiser les images:', error.message);
    }
  }

  async deployToNetlify() {
    console.log('üöÄ D√©ploiement vers Netlify...');
    
    try {
      // V√©rifier si Netlify CLI est install√©
      try {
        execSync('netlify --version', { stdio: 'ignore' });
      } catch (error) {
        console.log('üì¶ Installation de Netlify CLI...');
        execSync('npm install -g netlify-cli', { stdio: 'inherit' });
      }
      
      // D√©ployer
      console.log('üåê D√©ploiement en cours...');
      execSync('netlify deploy --prod --dir=dist', { stdio: 'inherit' });
      
      console.log('‚úÖ D√©ploiement termin√© avec succ√®s');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©ploiement:', error.message);
      return false;
    }
  }

  async runPreDeploymentChecks() {
    console.log('üîç V√©rifications pr√©-d√©ploiement...\n');
    
    const checks = [
      { name: 'Git Status', check: () => this.checkGitStatus() },
      { name: 'Git LFS', check: () => this.checkGitLFS() }
    ];
    
    for (const check of checks) {
      console.log(`\nüìã ${check.name}:`);
      const result = await check.check();
      if (!result) {
        console.log(`‚ùå √âchec de la v√©rification: ${check.name}`);
        return false;
      }
    }
    
    console.log('\n‚úÖ Toutes les v√©rifications passent');
    return true;
  }

  async commitChanges(message = 'feat: Optimized deployment with new architecture') {
    console.log('üíæ Commit des changements...');
    
    try {
      execSync('git add .', { stdio: 'inherit' });
      execSync(`git commit -m "${message}"`, { stdio: 'inherit' });
      console.log('‚úÖ Changements commit√©s');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors du commit:', error.message);
      return false;
    }
  }

  async pushToGitHub() {
    console.log('üì§ Push vers GitHub...');
    
    try {
      execSync('git push', { stdio: 'inherit' });
      console.log('‚úÖ Push vers GitHub termin√©');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors du push:', error.message);
      return false;
    }
  }

  async run() {
    console.log('üöÄ D√©ploiement optimis√© vers Netlify\n');
    
    try {
      // 1. V√©rifications pr√©-d√©ploiement
      const checksPassed = await this.runPreDeploymentChecks();
      if (!checksPassed) {
        console.log('\n‚ùå V√©rifications √©chou√©es. Arr√™t du d√©ploiement.');
        return { success: false, error: 'V√©rifications √©chou√©es' };
      }
      
      // 2. Commit des changements si n√©cessaire
      const hasChanges = !(await this.checkGitStatus());
      if (hasChanges) {
        console.log('\nüíæ Changements d√©tect√©s, commit en cours...');
        await this.commitChanges();
      }
      
      // 3. Build du projet
      console.log('\nüî® Build du projet...');
      const buildSuccess = await this.buildProject();
      if (!buildSuccess) {
        return { success: false, error: '√âchec du build' };
      }
      
      // 4. Optimisation
      console.log('\n‚ö° Optimisation...');
      await this.optimizeBuild();
      
      // 5. D√©ploiement
      console.log('\nüåê D√©ploiement...');
      const deploySuccess = await this.deployToNetlify();
      if (!deploySuccess) {
        return { success: false, error: '√âchec du d√©ploiement' };
      }
      
      // 6. Push vers GitHub si n√©cessaire
      if (hasChanges) {
        console.log('\nüì§ Push vers GitHub...');
        await this.pushToGitHub();
      }
      
      console.log('\nüéâ D√©ploiement termin√© avec succ√®s !');
      console.log('\nüìä R√©sum√©:');
      console.log('   ‚úÖ V√©rifications pass√©es');
      console.log('   ‚úÖ Build optimis√©');
      console.log('   ‚úÖ D√©ploiement Netlify');
      console.log('   ‚úÖ Images avec Git LFS');
      console.log('   ‚úÖ Architecture optimis√©e');
      
      return { success: true };
      
    } catch (error) {
      console.error('\n‚ùå Erreur lors du d√©ploiement:', error.message);
      return { success: false, error: error.message };
    }
  }
}

// Ex√©cuter le d√©ploiement
if (require.main === module) {
  const deployer = new NetlifyDeployer();
  deployer.run().then(result => {
    if (result.success) {
      console.log('\n‚úÖ D√©ploiement r√©ussi !');
      process.exit(0);
    } else {
      console.log('\n‚ùå D√©ploiement √©chou√© !');
      process.exit(1);
    }
  });
}

module.exports = NetlifyDeployer; 